/**
 * @author Anthony Campos
 */
package study.sudokusolver;

public class SudokuSolver extends javax.swing.JFrame {

    private final int MAX_INPUT = 81;
    private boolean taskRunning = false;
    private Puzzle puzzle;

    /**
     * Creates new form SudokuSolver
     */
    public SudokuSolver() {
        initComponents();

        // create puzzle object
        puzzle = new Puzzle();

        // create visualization of puzzle object
        puzzle.fillPuzzlePanel(puzzlePanel);

    } // end of SudokuSolver 

    /**
     * @brief threadTask, thread to solve puzzle object
     * @pre no thread is currently solving the puzzle
     * @post Sudoku puzzle solved if solver successful
     */
    private void threadTask() {

        puzzle.solve();
        if (puzzle.isSolved()) {

            inputCheckLabel.setText("Puzzle Solved");
        } else {

            inputCheckLabel.setText("Failed to Solve Puzzle");

        } // end if 

        taskRunning = false;

    } // end threadTask

    /**
     * @brief processInput, process string object provided by user to puzzle
     * input
     * @parm String [input], int[] [outputDigits]
     * @pre none
     * @post outputDigits updated to contain provided puzzle/input
     */
    private void processInput(String input, int[] outputDigits) {

        int digitCount = 0; // track usable digits
        // loop through the input
        for (int i = 0; i < input.length() && digitCount < MAX_INPUT; i++) {

            // if the char at a given index is between 0 to 9
            // then it is usable 
            if (input.charAt(i) >= '0' && input.charAt(i) <= '9') {

                outputDigits[digitCount] = Character.getNumericValue(input.charAt(i));
                digitCount++;

            } // end if

        } // end if 

    } // end of processInput

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        background = new javax.swing.JPanel();
        puzzlePanel = new javax.swing.JPanel();
        enterDataButton = new javax.swing.JButton();
        solveButton = new javax.swing.JButton();
        inputCheckLabel = new javax.swing.JLabel();
        programTitle = new javax.swing.JLabel();
        dataField = new javax.swing.JTextField();
        clearButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        background.setBackground(new java.awt.Color(255, 255, 255));

        puzzlePanel.setBackground(new java.awt.Color(204, 204, 204));
        puzzlePanel.setPreferredSize(new java.awt.Dimension(500, 500));
        puzzlePanel.setLayout(new java.awt.GridLayout(9, 9, 4, 4));

        enterDataButton.setBackground(new java.awt.Color(204, 204, 204));
        enterDataButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        enterDataButton.setText("Submit Puzzle");
        enterDataButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));
        enterDataButton.setOpaque(true);
        enterDataButton.setPreferredSize(new java.awt.Dimension(125, 50));
        enterDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterDataButtonActionPerformed(evt);
            }
        });

        solveButton.setBackground(new java.awt.Color(204, 204, 204));
        solveButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        solveButton.setText("Solve");
        solveButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));
        solveButton.setPreferredSize(new java.awt.Dimension(125, 50));
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveButtonActionPerformed(evt);
            }
        });

        inputCheckLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        inputCheckLabel.setToolTipText("");
        inputCheckLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        programTitle.setBackground(new java.awt.Color(255, 255, 255));
        programTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        programTitle.setText("Sudoku Solver Back Tracking Visualizer");

        clearButton.setBackground(new java.awt.Color(204, 204, 204));
        clearButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clearButton.setText("Clear");
        clearButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));
        clearButton.setPreferredSize(new java.awt.Dimension(125, 50));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
        background.setLayout(backgroundLayout);
        backgroundLayout.setHorizontalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundLayout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(inputCheckLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51))
                            .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(dataField, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(backgroundLayout.createSequentialGroup()
                                    .addComponent(enterDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(62, 62, 62)
                                    .addComponent(solveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(puzzlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(programTitle)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        backgroundLayout.setVerticalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(programTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputCheckLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(enterDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(solveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(puzzlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @brief enterDataButtonActionPerformed, begin processing puzzle input from
     * user
     * @parm java.awt.event.ActionEvent [evt]
     * @pre a puzzle is not in the process of being solved
     * @post if valid puzzle provided then puzzle filled with provided data,
     * otherwise print error message
     */
    private void enterDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterDataButtonActionPerformed

        // if task running don't enter puzzle
        if (taskRunning) {

            dataField.setText("");
            inputCheckLabel.setText("Busy Solving Current Puzzle.");
            return;
        } // end if 

        // get user provided puzzle
        String input = dataField.getText();
        // clear field
        dataField.setText("");
        //store usable inputs
        int[] outputDigits = new int[MAX_INPUT];

        // process input into usable int array
        processInput(input, outputDigits);

        // clear puzzle before next puzzle submit 
        puzzle.clear();
        // input data into puzzle & check for success
        if (!puzzle.fill(outputDigits)) {

            inputCheckLabel.setText("Invalid Puzzle Provided, Please Provide Valid Sudoku Puzzle");

        } else {

            inputCheckLabel.setText("");

        } // end if 

    }//GEN-LAST:event_enterDataButtonActionPerformed

    /**
     * @brief solveButtonActionPerformed, solve the provided puzzle
     * @parm java.awt.event.ActionEvent [evt]
     * @pre a puzzle is not in the process of being solved
     * @post puzzle solved if threadTask is successful
     */
    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed

        // create thread to solve provided puzzle
        // if a puzzle is not being currently solved 
        if (!taskRunning) {

            taskRunning = true;
            Runnable runnable
                    = () -> {
                        threadTask();
                    };
            Thread thread = new Thread(runnable);
            thread.start();

        } // end if 

    }//GEN-LAST:event_solveButtonActionPerformed

    /**
     * @brief clearButtonActionPerformed, clear current puzzle data
     * @parm java.awt.event.ActionEvent [evt]
     * @pre none
     * @post puzzle data cleared/reset
     */
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed

        // if task running don't enter puzzle
        if (taskRunning) {

            inputCheckLabel.setText("Can't Clear, Busy Solving Current Puzzle.");
            return;

        } // end if 

        // clear puzzle
        puzzle.clear();
        inputCheckLabel.setText("");

    }//GEN-LAST:event_clearButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SudokuSolver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SudokuSolver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SudokuSolver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SudokuSolver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SudokuSolver().setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JButton clearButton;
    private javax.swing.JTextField dataField;
    private javax.swing.JButton enterDataButton;
    private javax.swing.JLabel inputCheckLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel programTitle;
    private javax.swing.JPanel puzzlePanel;
    private javax.swing.JButton solveButton;
    // End of variables declaration//GEN-END:variables
}
